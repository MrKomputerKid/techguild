import * as AWS from 'aws-sdk';
import type { NextRequest } from 'next/server';
import { NextResponse } from 'next/server';
import * as nodemailer from 'nodemailer';

export async function POST(req: NextRequest) {
  const aws_access_key_id = process.env.AWS_ACCESS_KEY_SES;
  const aws_secret_access_key = process.env.AWS_SECRET_ACCESS_KEY_SES;
  const body = await req.json();

  if (!body?.name || !body?.email || !body?.message) {
    return NextResponse.json(
      { error: 'Missing name, email, or message' },
      { status: 400 }
    );
  }
  if (!process.env.BUS_EMAIL) {
    return NextResponse.json('BUS_EMAIL not set', { status: 400 });
  }
  if (!aws_access_key_id) {
    return NextResponse.json('AWS_ACCESS_KEY_SES not set', { status: 400 });
  }
  if (!aws_secret_access_key) {
    return NextResponse.json('AWS_SECRET_ACCESS_KEY_SES not set', {
      status: 400,
    });
  }

  AWS.config.update({
    accessKeyId: aws_access_key_id,
    secretAccessKey: aws_secret_access_key,
    region: 'us-west-2',
  });

  AWS.config.logger = console;

  AWS.config.getCredentials((err) => {
    if (err) {
      // eslint-disable-next-line no-console
      console.error(err);
      return NextResponse.json(err, { status: 500 });
    }
    // eslint-disable-next-line no-console
    console.log('AWS Credentials:', AWS.config.credentials);
  });

  const ses = new AWS.SES({ apiVersion: '2010-12-01' });

  const emailBody = loadTemplates('external');

  const transporter = nodemailer.createTransport({
    SES: { ses, aws: AWS },
  });

  const internalEmailBody = JSON.stringify(body, null, 2);

  try {
    const response = await transporter.sendMail({
      from: process.env.BUS_EMAIL,
      to: body.email,
      subject: 'Thank you for contacting us!',
      html: emailBody,
    });

    const internalResponse = await transporter.sendMail({
      from: process.env.BUS_EMAIL,
      to: process.env.BUS_EMAIL,
      subject: 'New message from website',
      html: internalEmailBody,
    });

    // eslint-disable-next-line no-console
    console.log(response);
    return NextResponse.json(
      {
        name: body.name,
        email: body.email,
        body: body.message,
        emailResult: [response, internalResponse],
      },
      { status: 200 }
    );
  } catch (err) {
    return NextResponse.json(err, { status: 500 });
  }
}

function loadTemplates(template: string): string {
  const templates: { [key: string]: string } = {
    external: ``,
  };
  // Decode the base64 and return the string.
  const decoded = Buffer.from(templates[template]).toString('base64');
  return decoded;
}
